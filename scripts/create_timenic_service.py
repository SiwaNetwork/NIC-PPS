#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è systemd —Å–µ—Ä–≤–∏—Å–∞ TimeNIC
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç PPS –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import subprocess
from pathlib import Path


SYSTEMD_SERVICE_TEMPLATE = """[Unit]
Description=Setup PTP on TimeNIC PCIe card
After=network.target

[Service]
Type=oneshot
RemainAfterExit=yes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PPS –≤—ã—Ö–æ–¥–∞ –Ω–∞ SMA1 (SDP0)
ExecStart=/usr/bin/testptp -d {ptp_device} -L0,2
ExecStart=/usr/bin/testptp -d {ptp_device} -p 1000000000

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PPS –≤—Ö–æ–¥–∞ –Ω–∞ SMA2 (SDP1)
ExecStart=/usr/bin/testptp -d {ptp_device} -L1,1

# –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ PHC –ø–æ –≤–Ω–µ—à–Ω–µ–º—É PPS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
{phc_sync_cmd}

[Install]
WantedBy=multi-user.target
"""


def find_ptp_device(interface):
    """–ü–æ–∏—Å–∫ PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        result = subprocess.run(
            ["ethtool", "-T", interface],
            capture_output=True, text=True
        )
        if result.returncode == 0:
            for line in result.stdout.split('\n'):
                if 'PTP Hardware Clock:' in line:
                    clock_id = line.split(':')[1].strip()
                    return f"/dev/ptp{clock_id}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
    return None


def create_service(interface=None, enable_phc_sync=False):
    """–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
    if os.geteuid() != 0:
        print("‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo python3 create_timenic_service.py")
        sys.exit(1)
    
    # –ü–æ–∏—Å–∫ PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if interface:
        ptp_device = find_ptp_device(interface)
        if not ptp_device:
            print(f"‚ùå PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {interface}")
            sys.exit(1)
    else:
        # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        ptp_devices = list(Path("/dev").glob("ptp*"))
        if not ptp_devices:
            print("‚ùå PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            sys.exit(1)
        ptp_device = str(ptp_devices[0])
        print(f"‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {ptp_device}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ PHC
    phc_sync_cmd = ""
    if enable_phc_sync:
        phc_sync_cmd = f"ExecStart=/usr/sbin/ts2phc -c {ptp_device} -s generic --ts2phc.pin_index 1 -m -l 7"
    else:
        phc_sync_cmd = "# ExecStart=/usr/sbin/ts2phc -c {ptp_device} -s generic --ts2phc.pin_index 1 -m -l 7"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ä–≤–∏—Å–∞
    service_content = SYSTEMD_SERVICE_TEMPLATE.format(
        ptp_device=ptp_device,
        phc_sync_cmd=phc_sync_cmd
    )
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä–≤–∏—Å–∞
    service_path = "/etc/systemd/system/ptp-nic-setup.service"
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞
    print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ {service_path}...")
    with open(service_path, 'w') as f:
        f.write(service_content)
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
    print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd...")
    subprocess.run(["systemctl", "daemon-reload"], check=True)
    
    # –í–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
    print("‚úÖ –í–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞...")
    subprocess.run(["systemctl", "enable", "ptp-nic-setup"], check=True)
    
    print("\n‚ú® –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  sudo systemctl start ptp-nic-setup    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
    print("  sudo systemctl status ptp-nic-setup   # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    print("  sudo systemctl stop ptp-nic-setup     # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
    print("  sudo journalctl -u ptp-nic-setup      # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å
    response = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å —Å–µ–π—á–∞—Å? (y/N): ")
    if response.lower() == 'y':
        subprocess.run(["systemctl", "start", "ptp-nic-setup"], check=True)
        print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        subprocess.run(["systemctl", "status", "ptp-nic-setup", "--no-pager"])


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è TimeNIC"
    )
    parser.add_argument(
        '--interface', '-i',
        help='–°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å TimeNIC (–Ω–∞–ø—Ä–∏–º–µ—Ä, enp3s0)'
    )
    parser.add_argument(
        '--enable-phc-sync',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é PHC –ø–æ –≤–Ω–µ—à–Ω–µ–º—É PPS'
    )
    
    args = parser.parse_args()
    
    create_service(args.interface, args.enable_phc_sync)


if __name__ == "__main__":
    main()