#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π TimeNIC
"""

import sys
import subprocess
from pathlib import Path


def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    try:
        from core.timenic_manager import TimeNICManager, PPSMode, PTMStatus
        print("‚úÖ core.timenic_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from cli.timenic_cli import timenic
        print("‚úÖ cli.timenic_cli –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_ptp_devices():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    
    ptp_devices = list(Path("/dev").glob("ptp*"))
    if ptp_devices:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(ptp_devices)}")
        for ptp in ptp_devices:
            print(f"   - {ptp}")
    else:
        print("‚ö†Ô∏è  PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return len(ptp_devices) > 0


def test_testptp():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è testptp"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ testptp...")
    
    try:
        result = subprocess.run(["which", "testptp"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ testptp –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå testptp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo bash scripts/install_testptp.sh")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ testptp: {e}")
        return False


def test_network_interfaces():
    """–¢–µ—Å—Ç —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤...")
    
    try:
        result = subprocess.run(["ip", "link", "show"], capture_output=True, text=True)
        if result.returncode == 0:
            interfaces = []
            for line in result.stdout.split('\n'):
                if ': ' in line and 'lo:' not in line:
                    parts = line.split(': ')
                    if len(parts) >= 2:
                        iface = parts[1].split('@')[0]
                        if iface not in ['lo']:
                            interfaces.append(iface)
            
            if interfaces:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {len(interfaces)}")
                for iface in interfaces[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   - {iface}")
                return True
            else:
                print("‚ö†Ô∏è  –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}")
        return False


def test_cli_help():
    """–¢–µ—Å—Ç CLI —Å–ø—Ä–∞–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CLI...")
    
    try:
        result = subprocess.run([sys.executable, "run.py", "--help"], 
                              capture_output=True, text=True)
        if result.returncode == 0 and "TimeNIC" in result.stdout:
            print("‚úÖ CLI —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ CLI")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ CLI: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ TimeNIC...\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_imports),
        ("PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", test_ptp_devices),
        ("testptp", test_testptp),
        ("–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã", test_network_interfaces),
        ("CLI", test_cli_help)
    ]
    
    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{name}': {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {name}")
    
    print("="*50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –Ω–∞–ª–∏—á–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.")


if __name__ == "__main__":
    main()